// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Server, dns, fs, iced, path, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  dns = require('native-dns');

  path = require('path');

  fs = require('fs');

  exports.Server = Server = (function() {
    function Server(port) {
      this.port = port;
      this.port = 53;
      this.server = dns.createServer();
      this.tab = {};
    }

    Server.prototype.setHooks = function() {
      this.server.on('request', ((function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.request.apply(_this, args);
        };
      })(this)));
      this.server.on('error', ((function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.error.apply(_this, args);
        };
      })(this)));
      this.server.on('socketError', (function(_this) {
        return function(err) {
          return console.log("[E] Error binding to port " + _this.port + ": " + err);
        };
      })(this));
      this.server.on('listening', (function(_this) {
        return function() {
          return console.log("[I] Listening on port " + _this.port);
        };
      })(this));
      return this.server.on('close', function() {
        return console.log("[E] Server closed..");
      });
    };

    Server.prototype.run = function() {
      this.setHooks();
      this.server.serve(this.port);
      return this.make_secure();
    };

    Server.prototype.error = function(err, buff, req, res) {
      return console.log("[E] Error: " + (JSON.stringify(err.stack)));
    };

    Server.prototype.resolve_locally = function(q) {
      var a, rec, ret;
      ret = null;
      if (((rec = this.tab[q.name]) != null) && ((a = rec[q.type]) != null)) {
        ret = {
          name: q.name,
          type: q.type,
          "class": q["class"],
          ttl: 30,
          address: a
        };
      }
      console.log("++ Local " + q.name + "/" + q.type + " -> " + (JSON.stringify(ret)));
      return ret;
    };

    Server.prototype.resolve_recursively = function(q, cb) {
      var name, res, rreq, type, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      name = q.name;
      type = dns.consts.QTYPE_TO_NAME[q.type];
      console.log("+ Recursive lookup for " + name + "/" + type);
      rreq = new dns.Request({
        question: new dns.Question({
          name: name,
          type: type
        }),
        server: {
          address: this.upstream,
          port: 53,
          type: 'udp'
        },
        timeout: 1000
      });
      res = [];
      rreq.on('timeout', (function(_this) {
        return function() {
          return console.log("[T] Timed out talking to " + _this.upstream);
        };
      })(this));
      rreq.on('message', (function(_this) {
        return function(err, answer) {
          var a, _i, _len, _ref, _results;
          if (answer.answer != null) {
            _ref = answer.answer;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              a = _ref[_i];
              console.log("++ Reply: " + name + "/" + type + " -> " + (JSON.stringify(a)));
              _results.push(res.push(a));
            }
            return _results;
          } else if (err) {
            return console.log("[E] Error in " + name + "/" + type + " -> " + err);
          }
        };
      })(this));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
            funcname: "Server.resolve_recursively"
          });
          rreq.send();
          rreq.on('end', __iced_deferrals.defer({
            lineno: 84
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          console.log("+ Finish lookup for " + name + "/" + type);
          return cb(res);
        };
      })(this));
    };

    Server.prototype.parse_resolution = function(r) {
      var from, qtyp, to, typ, x;
      x = r.split(':');
      if (x.length !== 3) {
        throw "Resolution is malformed; need 3 parts: " + r;
      } else {
        from = x[0], typ = x[1], to = x[2];
        if ((qtyp = dns.consts.NAME_TO_QTYPE[typ.toUpperCase()]) == null) {
          throw "Unknown query type: " + typ;
        } else {
          if (this.tab[from] == null) {
            this.tab[from] = {};
          }
          this.tab[from][qtyp] = to;
          return console.log("[I] Resolving " + from + "/" + typ + " -> " + to);
        }
      }
    };

    Server.prototype.do_version = function(cb) {
      var data, dirname, err, j, pkg, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
            funcname: "Server.do_version"
          });
          fs.realpath(__filename, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 108
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            throw "Can't resolve realpath " + __filename + ": " + err;
          }
          dirname = path.dirname(res);
          pkg = path.join(dirname, '..', 'package.json');
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
              funcname: "Server.do_version"
            });
            fs.readFile(pkg, 'utf8', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return data = arguments[1];
                };
              })(),
              lineno: 114
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err) {
              throw "Can't read " + pkg + ": " + err;
            }
            j = JSON.parse(data);
            console.log("ednsd version " + j.version);
            return cb();
          });
        };
      })(this));
    };

    Server.prototype.parse_args = function(argv, cb) {
      var a, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = true;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref;
          if (argv.v) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
                funcname: "Server.parse_args"
              });
              _this.do_version(__iced_deferrals.defer({
                lineno: 127
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(ret = false);
            });
          } else {
            if ((_this.upstream = argv.u) == null) {
              console.log("[E] -u<upstream> is required! Please provide a server");
              ret = false;
            } else {
              if (argv.p != null) {
                _this.port = argv.p;
              }
              _ref = argv._;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                a = _ref[_i];
                _this.parse_resolution(a);
              }
              _this.uid = argv.U;
              _this.gid = argv.G;
              console.log("[I] Upstream server is: " + _this.upstream);
            }
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(ret);
        };
      })(this));
    };

    Server.prototype.make_secure = function() {
      var u;
      u = process.getuid();
      if (u === 0) {
        if (this.gid) {
          console.log("[I] setgid to " + this.gid);
          process.setgid(this.gid);
        }
        if (this.uid) {
          console.log("[I] setuid to " + this.uid);
          return process.setuid(this.uid);
        }
      }
    };

    Server.prototype.resolve = function(q, cb) {
      var r, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      r = this.resolve_locally(q);
      (function(_this) {
        return (function(__iced_k) {
          if (r != null) {
            return __iced_k(r = [r]);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
                funcname: "Server.resolve"
              });
              _this.resolve_recursively(q, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return r = arguments[0];
                  };
                })(),
                lineno: 163
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(r);
        };
      })(this));
    };

    Server.prototype.request = function(req, res) {
      var q, r, results, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = req.question;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              q = _ref[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
                  funcname: "Server.request"
                });
                _this.resolve(q, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return results = arguments[0];
                    };
                  })(),
                  lineno: 170
                }));
                __iced_deferrals._fulfill();
              })(function() {
                var _j, _len1;
                for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
                  r = results[_j];
                  res.answer.push(r);
                }
                return _next();
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return res.send();
        };
      })(this));
    };

    return Server;

  })();

  exports.run = function(argv) {
    var ret, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    s = new Server;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/iced/emergency-dns-server/src/server.iced",
          funcname: "run"
        });
        s.parse_args(argv, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ret = arguments[0];
            };
          })(),
          lineno: 179
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (ret) {
          return s.run();
        }
      };
    })(this));
  };

}).call(this);
